# -*- coding: utf-8 -*-
"""
Created on 18/08/2022
Last update 24/08/2022

@author: Victor
"""

import json
from re import S
import time
import multiprocessing


##############################################################################################################
##############################################################################################################
###################################### LOAD the data  OPTI 1 #################################################

#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kConf.json', 'r') as f:
#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-1kConf.json', 'r') as f:

#with open('.\..\..\Data_Json\Dictionnary\\testDico.json', 'r') as f: 	
#with open('.\..\..\Data_Json\Dictionnary\dicoConfNodes.json', 'r') as f: 	
#with open('.\..\..\Data_Json\Dictionnary\\1kDico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\100Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\80Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\60Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\55Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\50Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\12Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\11Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\10Dico.json', 'r') as f:		
    #dico = json.load(f)


with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-1kNoConf.json', 'r') as f:
#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kNoConf.json', 'r') as f:
	dico = json.load(f)
#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kNoConf.json', 'r') as f2:
#	dico2 = json.load(f2)


##############################################################################################################
##############################################################################################################
######################################  OPTIMISATION 1 - Algorithme 3 ######################################## 

def sum_weight(dico,solution):
    sum = 0
    for id in solution:
        sum += dico[str(id)][0]
    return sum

def max_sum_list_int(dico,l_sol):
	l_sum = []
	for sol in l_sol:
		l_sum.append(sum_weight(dico,sol[0]))
	return (max(l_sum), l_sol[l_sum.index(max(l_sum))][0])

def deletInclude(liste):
	i = 0
	while i < len(liste):
		j = i + 1 
		while j < len(liste):
			if liste[i][0] < liste[j][0]:
				del liste[i]
				continue
			elif liste[j][0] < liste[i][0]:
				del liste[j]	
				continue
			j += 1
		i += 1
	return liste

#liste = [[id_nodes],[conflicts]]
def compatible_merge(node,liste,dico):
    l_merge_comp = [{node}, set(dico[str(node)][1]), dico[str(node)][0]]
    compatible = True
    for n in liste[0]:
        if node in dico[str(n)][1]:
            compatible = False
        else:
            l_merge_comp[0].add(n)
            l_merge_comp[1] |= set(dico[str(n)][1])
            l_merge_comp[2] += dico[str(n)][0]
    return (l_merge_comp,compatible)
		
def printSol(l_sol):
	for l in l_sol:
		print(f'{l}\n')


# Build the solutions
def build_sol(dico):
    liste_sol = []
    l_dico = list(dico.items())
    nb_nodes = len(l_dico)
    thresh = int(nb_nodes*0.6)
    liste_sol.append([{int(l_dico[0][0])},set(l_dico[0][1][1]), l_dico[0][1][0]])
    maxi = l_dico[0][1][0]

    for i in range(1,len(l_dico)):
        j = 0
        h = 0 # sert Ã  ne pas compter en plusieurs fois les nodes ajouter en fin de liste
        while j < len(liste_sol)-h:
            (l2,bool) = compatible_merge(int(l_dico[i][0]),liste_sol[j],dico)
            if bool:
                liste_sol[j][0].add(int(l_dico[i][0]))
                liste_sol[j][1] |= set(l_dico[i][1][1])
                liste_sol[j][2] += l_dico[i][1][0]
                if maxi < liste_sol[j][2]:
                    maxi = liste_sol[j][2]
                elif i > thresh:
                    potential_max = liste_sol[j][2]
                    for k in range(i+1,len(l_dico)):
                        potential_max += l_dico[k][1][0]  
                    if potential_max < maxi:
                        del liste_sol[j]
                        j -= 1    
            else:
                exist = False
                for l in liste_sol:
                    if l[0] == l2[0]:
                        exist = True
                        break 
                if not exist:
                    liste_sol += [[l2[0],l2[1],l2[2]]]
                    h += 1
                    if maxi < l2[2]:
                        maxi = l2[2]
            j += 1
        liste_sol = deletInclude(liste_sol)
    return liste_sol


#print(build_sol(dico))


"""
d_test = {
'4546': [0.22586998, [4538, 4537, 4535, 4550, 4534, 4540, 4549, 4541]],
'4550': [0.16538, [4555, 4537, 4540, 4539, 4542, 4546, 4544, 4535]],
'4545': [0.38132, [4555, 4537, 4542, 4539, 4534, 4549, 4540, 4535]], 
'4542': [0.18947999, [4545, 4535, 4534, 4550, 4544, 4549]],
'4535': [0.18592, [4541, 4542, 4546, 4538, 4545, 4550]], 
'4538': [0.17807999, [4555, 4549, 4546, 4544, 4534, 4535]],
'4541': [0.21197, [4555, 4535, 4549, 4534, 4544, 4546]], 
'4555': [0.38817, [4550, 4541, 4538, 4536, 4545]], 
'4549': [0.21113, [4538, 4541, 4542, 4546, 4545]],
'4534': [0.16792001, [4542, 4541, 4546, 4538, 4545]],
'4544': [0.31498, [4538, 4542, 4541, 4550]],
'4537': [0.1469, [4550, 4545, 4546]], 
'4540': [0.29896, [4550, 4546, 4545]],
'4539': [0.14377001, [4550, 4545]], 
'4536': [0.15463999, [4555]]
}
"""


"""
res = build_sol(d_test)
print("\n")
printSol(res)
print(len(res))
"""


#dico_desordre = {"5057": [0.13944, [5167, 5209, 5194]],"5167": [0.19332, [5200, 5126, 5099, 5182, 5067, 5186, 5188, 5185, 5093, 5173, 5133, 5066, 5057, 5197, 5198, 5132, 5183, 5084, 5088, 5125, 5119, 5174, 5094, 5148, 5102, 5113, 5071, 5110, 5064, 5143, 5075, 5147, 5172, 5086, 5060, 5087, 5073, 5136, 5195, 5097, 5058, 5092, 5135, 5210, 5089, 5104, 5074, 5101, 5063, 5095, 5201, 5096, 5127, 5114, 5123, 5122, 5083, 5187, 5181, 5171, 5070, 5077, 5108, 5079, 5061, 5100, 5118, 5090, 5116, 5082, 5168, 5203, 5149, 5169, 5105, 5069, 5138, 5146, 5117, 5128, 5144, 5202]],"5200": [0.19746, [5167, 5180, 5194, 5154, 5166, 5193, 5179]],"5180": [0.15423, [5101, 5198, 5060, 5064, 5104, 5197, 5066, 5160, 5186, 5110, 5127, 5087, 5210, 5203, 5200, 5118, 5096, 5116, 5069, 5128, 5125, 5187, 5075, 5070, 5086, 5159, 5082, 5201, 5202, 5100, 5113, 5095, 5058, 5089, 5092, 5183, 5061, 5148, 5114, 5097, 5149, 5117, 5144, 5155, 5073, 5090, 5084, 5067, 5088, 5105, 5119, 5123, 5147, 5094, 5143, 5146, 5188, 5136, 5133, 5158, 5122, 5071, 5099, 5079, 5108, 5126, 5161, 5195, 5077, 5138, 5185, 5102, 5063, 5135, 5083, 5182, 5156, 5132, 5093, 5074]],"5101": [0.18455, [5180, 5209, 5167, 5194]],"5209": [0.38275, [5127, 5104, 5094, 5122, 5128, 5084, 5095, 5093, 5172, 5069, 5070, 5149, 5186, 5074, 5089, 5086, 5126, 5174, 5133, 5105, 5071, 5117, 5123, 5171, 5077, 5138, 5097, 5100, 5102, 5156, 5195, 5161, 5067, 5088, 5066, 5158, 5125, 5057, 5155, 5099, 5119, 5101, 5143, 5173, 5187, 5087, 5185, 5073, 5147, 5079, 5063, 5188, 5116, 5118, 5146, 5060, 5064, 5092, 5132, 5082, 5144, 5183, 5160, 5090, 5182, 5148, 5110, 5113, 5083, 5159, 5061, 5114, 5075, 5058, 5181, 5096, 5108, 5168, 5169, 5136, 5135]],"5127": [0.29529, [5209, 5194, 5180, 5167]],"5194": [0.22692999, [5156, 5161, 5132, 5090, 5203, 5172, 5117, 5210, 5077, 5088, 5173, 5200, 5168, 5104, 5074, 5066, 5063, 5089, 5064, 5099, 5095, 5108, 5174, 5127, 5158, 5060, 5079, 5116, 5201, 5160, 5092, 5084, 5123, 5135, 5069, 5155, 5061, 5070, 5058, 5128, 5118, 5181, 5202, 5114, 5125, 5097, 5094, 5075, 5138, 5169, 5197, 5102, 5126, 5093, 5096, 5110, 5198, 5171, 5133, 5101, 5086, 5071, 5067, 5087, 5082, 5073, 5113, 5119, 5159, 5122, 5100, 5105, 5136, 5057, 5083]],"5156": [0.14695999, [5194, 5209, 5180]],"5161": [0.22918999, [5194, 5209, 5180]],"5132": [0.24288002, [5194, 5167, 5209, 5180]],"5090": [0.28458, [5194, 5180, 5167, 5209]],"5203": [0.26022, [5180, 5194, 5167]],"5172": [0.33808, [5209, 5194, 5167]],"5117": [0.42330998, [5194, 5209, 5180, 5167]],"5210": [0.15190999, [5194, 5180, 5167]],"5077": [0.23533002, [5194, 5166, 5167, 5209, 5208, 5193, 5154, 5180, 5179]],"5166": [0.26979, [5125, 5086, 5171, 5099, 5077, 5146, 5069, 5092, 5200, 5116, 5073, 5185, 5135]],"5125": [0.17906, [5166, 5180, 5179, 5208, 5167, 5209, 5154, 5194, 5193]],"5179": [0.25639, [5125, 5086, 5158, 5116, 5135, 5092, 5146, 5099, 5200, 5073, 5069, 5077, 5185]],"5086": [0.14552, [5154, 5166, 5180, 5179, 5209, 5193, 5208, 5167, 5194]],"5154": [0.39229, [5086, 5158, 5200, 5069, 5171, 5099, 5125, 5116, 5077, 5135, 5073, 5092]],"5158": [0.18799, [5208, 5154, 5179, 5194, 5209, 5180, 5193]],"5208": [0.19962, [5185, 5158, 5135, 5125, 5086, 5171, 5116, 5146, 5077, 5099, 5073, 5092, 5069]],"5185": [0.18617001, [5208, 5167, 5209, 5166, 5180, 5179]],"5135": [0.16815, [5208, 5193, 5179, 5194, 5154, 5167, 5180, 5166, 5209]],"5193": [0.35146, [5069, 5171, 5135, 5086, 5073, 5092, 5125, 5077, 5158, 5116, 5200, 5099]],"5069": [0.36273, [5209, 5180, 5193, 5154, 5166, 5194, 5167, 5208, 5179]],"5171": [0.16397001, [5166, 5193, 5167, 5154, 5209, 5208, 5194]],"5073": [0.1515, [5180, 5193, 5166, 5209, 5167, 5208, 5154, 5179, 5194]],"5092": [0.31272, [5180, 5166, 5194, 5179, 5193, 5209, 5167, 5208, 5154]],"5116": [0.21493001, [5180, 5194, 5179, 5208, 5166, 5154, 5209, 5167, 5193]],"5099": [0.16049, [5167, 5166, 5194, 5154, 5209, 5208, 5180, 5179, 5193]],"5146": [0.46793, [5166, 5208, 5180, 5209, 5179, 5167]],"5088": [0.2748, [5194, 5167, 5180, 5209]],"5173": [0.26645, [5194, 5167, 5209]],"5168": [0.26022, [5194, 5167, 5209]],"5104": [0.1656, [5194, 5180, 5209, 5167]],"5074": [0.32369, [5194, 5209, 5167, 5180]],"5066": [0.14357999, [5194, 5167, 5209, 5180]],"5063": [0.35146, [5194, 5209, 5180, 5167]],"5089": [0.21917, [5209, 5194, 5180, 5167]],"5064": [0.15555, [5194, 5180, 5167, 5209]],"5095": [0.17881, [5209, 5194, 5180, 5167]],"5108": [0.14102, [5194, 5167, 5180, 5209]],"5174": [0.27183002, [5209, 5194, 5167]],"5060": [0.3356, [5180, 5194, 5167, 5209]],"5079": [0.37183002, [5194, 5167, 5209, 5180]],"5201": [0.16687, [5180, 5194, 5167]],"5160": [0.14332, [5194, 5180, 5209]],"5084": [0.14001, [5209, 5167, 5194, 5180]],"5123": [0.26744002, [5167, 5209, 5194, 5180]],"5155": [0.38371998, [5180, 5194, 5209]],"5061": [0.20495, [5180, 5167, 5194, 5209]],"5070": [0.53992, [5209, 5180, 5167, 5194]],"5058": [0.19286999, [5180, 5194, 5167, 5209]],"5128": [0.26995, [5209, 5180, 5194, 5167]],"5118": [0.3105, [5180, 5167, 5194, 5209]],"5181": [0.16092, [5167, 5194, 5209]],"5202": [0.26385, [5180, 5194, 5167]],"5114": [0.41982, [5180, 5194, 5209, 5167]],"5097": [0.16099, [5180, 5209, 5194, 5167]],"5094": [0.15715, [5209, 5167, 5180, 5194]],"5075": [0.25897998, [5180, 5167, 5194, 5209]],"5138": [0.17424999, [5209, 5194, 5180, 5167]],"5169": [0.29984, [5194, 5167, 5209]],"5197": [0.22493999, [5167, 5180, 5194]],"5102": [0.20172998, [5209, 5167, 5194, 5180]],"5126": [0.37579, [5167, 5209, 5180, 5194]],"5093": [0.24342, [5209, 5167, 5194, 5180]],"5096": [0.18549, [5180, 5194, 5167, 5209]],"5110": [0.43857998, [5167, 5180, 5194, 5209]],"5198": [0.15463999, [5180, 5167, 5194]],"5133": [0.1452, [5167, 5209, 5180, 5194]],"5071": [0.34127, [5209, 5167, 5180, 5194]],"5067": [0.14769, [5167, 5209, 5180, 5194]],"5087": [0.14578, [5209, 5167, 5180, 5194]],"5082": [0.16973999, [5180, 5167, 5209, 5194]],"5113": [0.23596999, [5180, 5167, 5209, 5194]],"5119": [0.38567, [5167, 5180, 5209, 5194]],"5159": [0.20734999, [5180, 5209, 5194]],"5122": [0.19487, [5209, 5167, 5180, 5194]],"5100": [0.20705, [5180, 5209, 5167, 5194]],"5105": [0.29874, [5209, 5180, 5167, 5194]],"5136": [0.18868999, [5180, 5167, 5209, 5194]],"5083": [0.16049, [5167, 5194, 5180, 5209]],"5149": [0.20357999, [5209, 5180, 5167]],"5186": [0.54447997, [5167, 5209, 5180]],"5195": [0.1854, [5209, 5167, 5180]],"5143": [0.18037, [5180, 5209, 5167]],"5187": [0.2983, [5180, 5167, 5209]],"5147": [0.29257, [5180, 5209, 5167]],"5188": [0.51616, [5167, 5180, 5209]],"5144": [0.15757, [5180, 5209, 5167]],"5183": [0.55429, [5180, 5167, 5209]],"5182": [0.14815, [5167, 5209, 5180]],"5148": [0.8, [5180, 5167, 5209]]}

#d_inc = {"4793": [0.17841001, [4743]],"4752": [0.15265, [4802]],"4749": [0.16006, [4799]],"4728": [0.18294999, [4791, 4783]],"4778": [0.14982, [4770, 4702]],"4782": [0.2773, [4776, 4818, 4803]],"4727": [0.27586, [4803, 4776, 4818]],"4746": [0.21, [4776, 4818, 4789]],"4694": [0.15197, [4776, 4803, 4789]],"4745": [0.32934, [4789, 4818, 4776]],"4701": [0.19214, [4789, 4803, 4818]],"4698": [0.51794, [4789, 4803, 4818]],"4810": [0.2893, [4803, 4776, 4789]],"4747": [0.52933, [4818, 4776, 4789]],"4769": [0.41382998, [4803, 4818, 4789]],"4696": [0.32424, [4776, 4803, 4789]],"4700": [0.23905, [4818, 4803, 4789]],"4795": [0.30275, [4818, 4789, 4776]],"4820": [0.18345, [4776, 4789, 4803]],"4797": [0.14895001, [4776, 4818, 4789]],"4796": [0.15279, [4776, 4789, 4818]],"4808": [0.22516999, [4789, 4803, 4776]],"4688": [0.32314, [4789, 4803, 4776]],"4805": [0.39282, [4789, 4818, 4776]],"4811": [0.31677002, [4789, 4803, 4776]],"4766": [0.22704999, [4789, 4818, 4803]],"4768": [0.19197, [4803, 4818, 4789]],"4697": [0.33999, [4776, 4803, 4789]],"4783": [0.46363002, [4728, 4776, 4803, 4818]],"4791": [0.21774001, [4728, 4818, 4776, 4803]],"4707": [0.26827, [4776, 4803, 4818, 4789]],"4693": [0.1597, [4776, 4789, 4803, 4818]],"4713": [0.27046, [4803, 4818, 4776, 4789]],"4737": [0.26979, [4818, 4776, 4789, 4803]],"4711": [0.27876002, [4803, 4776, 4789, 4818]],"4735": [0.46052998, [4818, 4776, 4803, 4789]],"4736": [0.26744002, [4789, 4803, 4776, 4818]],"4743": [0.43614, [4793, 4776, 4789, 4818]],"4718": [0.30929, [4789, 4818, 4803, 4776]],"4706": [0.40693998, [4789, 4776, 4803, 4818]],"4719": [0.41189998, [4789, 4818, 4776, 4803]],"4703": [0.53136003, [4789, 4803, 4818, 4776]],"4705": [0.20675, [4803, 4818, 4776, 4789]],"4709": [0.17338, [4818, 4803, 4776, 4789]],"4702": [0.18354, [4778, 4789, 4818, 4803]],"4770": [0.22321999, [4778, 4803, 4818, 4789]],"4757": [0.31574, [4818, 4803, 4789, 4776]],"4733": [0.14217, [4818, 4776, 4789, 4803]],"4689": [0.23775999, [4776, 4803, 4789, 4818]],"4756": [0.40574002, [4818, 4789, 4803, 4776]],"4758": [0.34658, [4818, 4789, 4803, 4776]],"4712": [0.13926001, [4818, 4789, 4803, 4776]],"4720": [0.22095, [4803, 4789, 4776, 4818]],"4754": [0.14422, [4789, 4818, 4776, 4803]],"4730": [0.19241, [4773, 4723, 4750, 4800, 4815, 4761]],"4723": [0.68113, [4785, 4739, 4760, 4730, 4799, 4814]],"4785": [0.48588, [4723, 4761, 4815, 4800, 4750, 4773]],"4722": [0.27149, [4786, 4773, 4731, 4815, 4761, 4800, 4750]],"4814": [0.15211001, [4731, 4750, 4786, 4761, 4723, 4773, 4800]],"4760": [0.14422, [4723, 4786, 4815, 4750, 4731, 4800, 4773]],"4799": [0.1793, [4749, 4731, 4773, 4786, 4761, 4723, 4815]],"4739": [0.15136, [4723, 4815, 4800, 4786, 4773, 4761, 4750, 4731]],"4751": [0.14033, [4786, 4742, 4792, 4815, 4773, 4731, 4761, 4763, 4775, 4817]],"4801": [0.34225, [4815, 4786, 4775, 4761, 4742, 4763, 4817, 4792, 4773, 4731]],"4787": [0.28419, [4742, 4800, 4775, 4761, 4806, 4817, 4815, 4773, 4750, 4763, 4802]],"4762": [0.22163, [4817, 4742, 4786, 4775, 4792, 4800, 4802, 4806, 4731, 4750, 4773, 4815]],"4774": [0.46155, [4750, 4742, 4817, 4800, 4806, 4786, 4731, 4792, 4802, 4761, 4815, 4763]],"4816": [0.25312, [4802, 4786, 4763, 4800, 4792, 4731, 4742, 4750, 4761, 4806, 4775, 4773]],"4741": [0.22799, [4815, 4750, 4773, 4817, 4802, 4792, 4763, 4775, 4731, 4806, 4800, 4761, 4786]],"4822": [0.1744, [4780, 4776, 4789, 4734, 4725, 4744, 4710, 4717, 4803, 4699, 4704, 4794, 4755, 4690, 4767, 4692]],"4819": [0.60299003, [4744, 4755, 4780, 4794, 4704, 4690, 4717, 4725, 4803, 4699, 4734, 4776, 4767, 4789, 4710, 4692]],"4790": [0.19214, [4818, 4710, 4717, 4809, 4755, 4704, 4776, 4692, 4794, 4690, 4734, 4767, 4744, 4803, 4695, 4699]],"4753": [0.22516999, [4695, 4734, 4690, 4767, 4704, 4692, 4763, 4817, 4725, 4809, 4775, 4755, 4710, 4699, 4780, 4717]],"4804": [0.1719, [4704, 4717, 4710, 4776, 4780, 4734, 4809, 4755, 4690, 4818, 4695, 4789, 4725, 4767, 4699, 4692]],"4764": [0.20337999, [4710, 4794, 4809, 4692, 4717, 4699, 4725, 4780, 4744, 4817, 4767, 4704, 4690, 4695, 4802, 4775, 4734]],"4744": [0.28153998, [4819, 4817, 4731, 4761, 4742, 4775, 4822, 4773, 4786, 4765, 4764, 4792, 4818, 4789, 4790, 4815, 4776, 4763]],"4794": [0.20525, [4764, 4742, 4761, 4819, 4763, 4765, 4817, 4789, 4818, 4790, 4792, 4775, 4822, 4773, 4776, 4731, 4815, 4786]],"4765": [0.46576, [4695, 4699, 4767, 4809, 4725, 4717, 4789, 4704, 4692, 4794, 4776, 4744, 4780, 4803, 4710, 4734, 4690, 4818]],"4806": [0.25137, [4692, 4690, 4767, 4699, 4787, 4710, 4774, 4704, 4695, 4734, 4762, 4717, 4809, 4725, 4741, 4816, 4780, 4755]],"4792": [0.28829998, [4717, 4809, 4699, 4695, 4734, 4762, 4755, 4794, 4744, 4774, 4751, 4704, 4692, 4816, 4801, 4767, 4741, 4710, 4690]],"4742": [0.2397, [4787, 4692, 4774, 4762, 4794, 4809, 4744, 4725, 4690, 4695, 4801, 4767, 4751, 4780, 4755, 4704, 4710, 4816, 4699, 4717]],"4780": [0.19054, [4822, 4776, 4815, 4800, 4817, 4775, 4819, 4802, 4803, 4818, 4764, 4765, 4742, 4804, 4761, 4750, 4763, 4773, 4753, 4806]],"4725": [0.15096, [4773, 4763, 4775, 4765, 4742, 4822, 4776, 4819, 4764, 4753, 4818, 4800, 4803, 4750, 4761, 4802, 4804, 4817, 4806, 4815]],"4809": [0.16605, [4750, 4789, 4792, 4765, 4764, 4742, 4790, 4773, 4802, 4731, 4803, 4761, 4753, 4786, 4804, 4776, 4806, 4763, 4800, 4775]],"4695": [0.16353, [4776, 4786, 4761, 4753, 4773, 4765, 4792, 4742, 4803, 4731, 4750, 4806, 4800, 4763, 4802, 4775, 4804, 4764, 4789, 4790]],"4755": [0.18498, [4775, 4817, 4819, 4750, 4731, 4790, 4792, 4776, 4815, 4789, 4804, 4753, 4742, 4822, 4818, 4786, 4803, 4773, 4800, 4806, 4802]],"4699": [0.18328, [4817, 4792, 4765, 4800, 4806, 4764, 4761, 4815, 4763, 4819, 4822, 4802, 4750, 4786, 4731, 4742, 4803, 4818, 4753, 4789, 4790, 4804]],"4767": [0.15190999, [4815, 4802, 4806, 4765, 4753, 4818, 4742, 4764, 4792, 4786, 4803, 4817, 4790, 4800, 4763, 4822, 4731, 4819, 4804, 4750, 4789, 4761]],"4802": [0.27046, [4752, 4690, 4704, 4767, 4816, 4776, 4710, 4780, 4809, 4818, 4734, 4699, 4774, 4762, 4741, 4695, 4692, 4725, 4717, 4789, 4787, 4764, 4755]],"4800": [0.14474, [4787, 4734, 4699, 4774, 4780, 4717, 4739, 4704, 4785, 4695, 4762, 4725, 4816, 4692, 4760, 4767, 4722, 4730, 4755, 4809, 4814, 4741, 4690, 4710]],"4734": [0.15849, [4817, 4818, 4753, 4776, 4800, 4792, 4822, 4775, 4750, 4786, 4802, 4763, 4815, 4804, 4806, 4789, 4761, 4773, 4819, 4765, 4790, 4731, 4803, 4764]],"4817": [0.19432, [4734, 4744, 4755, 4762, 4699, 4717, 4774, 4710, 4780, 4787, 4741, 4794, 4753, 4776, 4801, 4764, 4767, 4789, 4725, 4704, 4690, 4751, 4692, 4803]],"4786": [0.24248, [4695, 4816, 4801, 4690, 4722, 4692, 4760, 4774, 4762, 4710, 4704, 4744, 4739, 4717, 4734, 4751, 4799, 4809, 4699, 4814, 4767, 4755, 4741, 4794]],"4775": [0.25654, [4755, 4692, 4725, 4704, 4787, 4818, 4801, 4780, 4734, 4710, 4744, 4762, 4690, 4789, 4753, 4794, 4803, 4695, 4741, 4751, 4764, 4717, 4816, 4809]],"4750": [0.19441, [4809, 4755, 4774, 4814, 4717, 4695, 4741, 4690, 4734, 4710, 4699, 4730, 4692, 4780, 4760, 4725, 4816, 4762, 4787, 4785, 4722, 4767, 4739, 4704]],"4731": [0.37097, [4690, 4799, 4704, 4744, 4814, 4755, 4695, 4774, 4809, 4722, 4692, 4699, 4816, 4762, 4751, 4760, 4734, 4741, 4767, 4710, 4794, 4717, 4739, 4801]],"4710": [0.69067997, [4764, 4776, 4817, 4790, 4802, 4806, 4775, 4773, 4786, 4822, 4763, 4804, 4750, 4789, 4765, 4818, 4742, 4753, 4792, 4761, 4803, 4731, 4815, 4800, 4819]],"4763": [0.55689, [4704, 4692, 4725, 4803, 4794, 4818, 4699, 4710, 4801, 4753, 4734, 4816, 4717, 4776, 4695, 4741, 4780, 4787, 4774, 4751, 4767, 4690, 4809, 4789, 4744]],"4717": [0.44896, [4792, 4789, 4817, 4804, 4818, 4765, 4790, 4800, 4750, 4764, 4822, 4819, 4776, 4786, 4763, 4773, 4806, 4742, 4802, 4803, 4761, 4731, 4775, 4753, 4815]],"4704": [0.24909, [4804, 4763, 4802, 4731, 4775, 4818, 4819, 4765, 4806, 4786, 4789, 4753, 4815, 4800, 4790, 4773, 4792, 4822, 4742, 4761, 4764, 4817, 4803, 4776, 4750]],"4815": [0.13944, [4767, 4801, 4739, 4780, 4741, 4692, 4760, 4787, 4699, 4704, 4785, 4734, 4755, 4799, 4751, 4774, 4690, 4722, 4710, 4725, 4730, 4744, 4762, 4794, 4717]],"4692": [0.18062, [4806, 4775, 4742, 4763, 4786, 4764, 4815, 4765, 4761, 4753, 4731, 4790, 4789, 4792, 4800, 4773, 4750, 4802, 4818, 4803, 4776, 4822, 4804, 4819, 4817]],"4690": [0.14487, [4773, 4731, 4802, 4806, 4818, 4753, 4786, 4789, 4742, 4819, 4750, 4775, 4804, 4790, 4792, 4822, 4815, 4776, 4763, 4764, 4761, 4765, 4800, 4817, 4803]],"4761": [0.27339, [4695, 4744, 4787, 4794, 4785, 4801, 4699, 4692, 4809, 4780, 4799, 4734, 4814, 4725, 4774, 4710, 4704, 4751, 4722, 4690, 4816, 4739, 4717, 4741, 4730, 4767]],"4773": [0.1726, [4690, 4695, 4730, 4725, 4722, 4799, 4710, 4809, 4741, 4787, 4744, 4704, 4734, 4717, 4794, 4692, 4751, 4762, 4780, 4760, 4814, 4755, 4739, 4785, 4816, 4801]],
#"4818": [0.16361001, [4766, 4725, 4758, 4790, 4734, 4735, 4747, 4712, 4733, 4795, 4690, 4757, 4717, 4709, 4775, 4797, 4704, 4743, 4700, 4737, 4768, 4703, 4754, 4767, 4746, 4763, 4718, 4802, 4805, 4780, 4713, 4756, 4720, 4794, 4791, 4705, 4710, 4744, 4711, 4770, 4769, 4727, 4719, 4804, 4707, 4698, 4745, 4699, 4755, 4782, 4692, 4701, 4702, 4783, 4706, 4796, 4693, 4765, 4736, 4689]],"4803": [0.20846, [4768, 4705, 4810, 4703, 4720, 4698, 4763, 4757, 4695, 4712, 4770, 4780, 4736, 4809, 4713, 4697, 4700, 4819, 4808, 4822, 4765, 4758, 4696, 4783, 4694, 4689, 4775, 4769, 4766, 4725, 4756, 4820, 4699, 4709, 4791, 4717, 4701, 4719, 4733, 4782, 4811, 4734, 4755, 4704, 4692, 4693, 4754, 4688, 4690, 4817, 4727, 4707, 4735, 4711, 4706, 4718, 4767, 4710, 4737, 4702, 4790]],"4776": [0.30095, [4697, 4734, 4797, 4810, 4725, 4820, 4817, 4689, 4712, 4809, 4791, 4795, 4754, 4709, 4747, 4757, 4811, 4796, 4695, 4707, 4746, 4780, 4743, 4710, 4802, 4694, 4733, 4693, 4782, 4822, 4735, 4696, 4727, 4783, 4737, 4706, 4720, 4765, 4717, 4755, 4804, 4790, 4713, 4763, 4705, 4711, 4719, 4745, 4703, 4819, 4690, 4794, 4805, 4736, 4704, 4692, 4718, 4688, 4758, 4744, 4808, 4756]],"4789": [0.2748, [4811, 4805, 4809, 4688, 4754, 4766, 4690, 4720, 4822, 4712, 4704, 4808, 4794, 4758, 4796, 4797, 4775, 4692, 4755, 4734, 4820, 4756, 4795, 4689, 4817, 4733, 4757, 4804, 4770, 4709, 4700, 4699, 4696, 4697, 4769, 4695, 4802, 4747, 4763, 4705, 4810, 4819, 4703, 4717, 4719, 4706, 4718, 4698, 4743, 4765, 4701, 4736, 4702, 4735, 4710, 4711, 4745, 4768, 4694, 4744, 4737, 4713, 4746, 4693, 4707, 4767]]}

#d_1 = {"807": [0.38867, [811, 814, 809]],"811": [0.24533, [807, 808, 813]],"813": [0.2401, [809, 811]],
#"809": [0.47128, [813, 807]],"814": [0.1983, [807, 808]],"808": [0.50294, [811, 814]]}

"""
def decrease(dico):
    l_deso = list(dico.items())
    l_croi = [l_deso[0]]
    for i in range(1,len(l_deso)):
        add = False
        for j in range (0,len(l_croi)):
            if len(l_deso[i][1][1]) >= len(l_croi[j][1][1]):
                l_croi.insert(j,l_deso[i])
                add = True
                break
        if add == False:
            l_croi.insert(j+1,l_deso[i])
    dico_output = {}
    for elem in l_croi:
        dico_output[elem[0]] = elem[1]
    return dico_output
"""

#d_dec = decrease(d_1)

"""
start = time.time()
res = build_sol(d_1)
end = time.time()
elapsed = end - start
print(f'Temps d\'exÃ©cution inc : {elapsed:.5}s')
print("\n")
printSol(res)
print(len(res))
h = []
for elem in res:
    h.append(elem[2])
print(max(h))

print(max_sum_list_int(d_1,res))
"""



##############################################################################################################
##############################################################################################################
###################################  OPTIMISATION 2 - Algorithme 3+ ########################################## 


##################################### LOAD the data for OPTI 2 ###############################################
with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico1kClear.json', 'r') as f: 	
#with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico2.5kClear.json', 'r') as f: 	
    l_dico = json.load(f)


#################################### Apply Opti 1 on the list of dico ########################################
def solutionForList(l_dico):
	output = [0,[]]
	i = 0
	size = len(l_dico["list"])
	for dico in l_dico["list"]:
		#print(f'{i} / {size}')
		val,liste = max_sum_list_int(dico,build_sol(dico))
		output[0] += val
		output[1] += liste
		#i+=1
	return output

"""
avg_time_1 = 0 
for i in range(0,10):
    start = time.time()
    output1 = solutionForList(l_dico)
    end = time.time()
    elapsed1 = end - start
    #print(output1[0])
    #print(output1[1])
    print(f'Temps d\'exÃ©cution conf : {elapsed1:.5}s')
    
    start = time.time()
    output2 = sum_weight(dico,dico)
    #print(output2)
    end = time.time()
    elapsed2 = end - start
    print(f'Temps d\'exÃ©cution no conf : {elapsed2:.5}s')
    #print(output1[0]+output2)
    #print(output1[1])
    print(f'Temps d\'exÃ©cution total : {elapsed1 + elapsed2:.5}s\n')
    avg_time_1 += elapsed1 + elapsed2
print(f'temps moyen = {avg_time_1/10}\n')
"""



output1 = solutionForList(l_dico)
#print(output1[0])
#print(output1[1])
output2 = sum_weight(dico,dico)
#print(output2)
print(f'Score total = {output1[0]+output2}')
#print(output1[1])




############################################ Parallelization #################################################


def task(dico):
	val,liste = max_sum_list_int(dico,build_sol(dico))
	return val,liste


def parallelization(l_dico):
	output = [0,[]]
	#start = time.time()
	pool = multiprocessing.Pool(2)
	result = pool.imap(task, l_dico["list"])
	for val,liste in result:
		output[0] += val
		output[1] += liste
	#end = time.time()
	#elapsed = end - start
	#print(f'Temps d\'exÃ©cution : {elapsed:.5}s')
	return output#,elapsed

"""
if __name__ == '__main__':
    with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico2.5kClear.json', 'r') as f: 	
        l_dico = json.load(f)

    start = time.time()
    output1 = parallelization(l_dico)
    #end = time.time()
    #elapsed = end - start
    #print(f'Temps d\'exÃ©cution conf : {elapsed1:.5}s\n')
    #print(output[0])

    #start = time.time()
    output2 = sum_weight(dico,dico)
    #print(output2)
    end = time.time()
    elapsed2 = end - start
    print(f'Temps d\'exÃ©cution no conf : {elapsed2:.5}s')

    #print(f'Temps d\'exÃ©cution total : {elapsed1+elapsed2:.5}s')
    print(f'Score total = {output1[0]+output2}')
"""