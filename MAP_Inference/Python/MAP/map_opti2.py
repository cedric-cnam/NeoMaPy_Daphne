# -*- coding: utf-8 -*-
"""
Created on 18/08/2022
Last update 24/08/2022

@author: Victor
"""

import json
from re import S
import time
import multiprocessing


##############################################################################################################
##############################################################################################################
###################################### LOAD the data  OPTI 1 #################################################

#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kConf.json', 'r') as f:
#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-1kConf.json', 'r') as f:

#with open('.\..\..\Data_Json\Dictionnary\\testDico.json', 'r') as f: 	
#with open('.\..\..\Data_Json\Dictionnary\dicoConfNodes.json', 'r') as f: 	
#with open('.\..\..\Data_Json\Dictionnary\\1kDico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\100Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\80Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\60Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\55Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\50Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\12Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\11Dico.json', 'r') as f:		
#with open('.\..\..\Data_Json\Dictionnary\\10Dico.json', 'r') as f:		
    #dico = json.load(f)


#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-1kNoConf.json', 'r') as f2:
with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kNoConf.json', 'r') as f:
	dico = json.load(f)
#with open('.\..\..\Data_Json\Dictionnary\ClearDico\dico-2.5kNoConf.json', 'r') as f2:
#	dico2 = json.load(f2)


##############################################################################################################
##############################################################################################################
######################################  OPTIMISATION 1 - Algorithme 3 ######################################## 

def sum_weight(dico,solution):
    sum = 0
    for id in solution:
        sum += dico[str(id)][0]
    return sum

def max_sum_list_int(dico,l_sol):
	l_sum = []
	for sol in l_sol:
		l_sum.append(sum_weight(dico,sol[0]))
	return (max(l_sum), l_sol[l_sum.index(max(l_sum))][0])

def deletInclude(liste):
	i = 0
	while i < len(liste):
		j = i + 1 
		while j < len(liste):
			if set(liste[i][0]) < set(liste[j][0]):
				del liste[i]
				continue
			elif set(liste[j][0]) < set(liste[i][0]):
				del liste[j]	
				continue
			j += 1
		i += 1
	return liste

#liste = [[id_nodes],[conflicts]]
def compatible_merge(node,liste,dico):
	l_merge_comp = [[node],set(dico[str(node)][1])]
	compatible = True
	for n in liste[0]:
		if node in dico[str(n)][1]:
			compatible = False
		else:
			l_merge_comp[0].append(n)
			l_merge_comp[1] |= set(dico[str(n)][1])
	return (l_merge_comp,compatible)
		
def printSol(l_sol):
	for l in l_sol:
		print(f'{l}\n')

# Build the solutions
def build_sol(dico):
	liste_sol = []
	l_dico = list(dico.items())
	liste_sol.append([[int(l_dico[0][0])],set(l_dico[0][1][1])])
	for i in range(1,len(l_dico)):
		#print(f'i = {i}')
		for j in range(0,len(liste_sol)):
			(l2,bool) = compatible_merge(int(l_dico[i][0]),liste_sol[j],dico)
			if bool:
				liste_sol[j][0].append(int(l_dico[i][0]))
				liste_sol[j][1] |= set(l_dico[0][1][1])
			else:
				exist = False
				for l in liste_sol:
					if l[0] == l2[0]:
						exist = True
						break
				if not exist:
					liste_sol += [[l2[0],l2[1]]]

		liste_sol = deletInclude(liste_sol)
	#printSol(liste_sol) 
	return liste_sol

#print(build_sol(dico))


#dico_desordre = {"5057": [0.13944, [5167, 5209, 5194]],"5167": [0.19332, [5200, 5126, 5099, 5182, 5067, 5186, 5188, 5185, 5093, 5173, 5133, 5066, 5057, 5197, 5198, 5132, 5183, 5084, 5088, 5125, 5119, 5174, 5094, 5148, 5102, 5113, 5071, 5110, 5064, 5143, 5075, 5147, 5172, 5086, 5060, 5087, 5073, 5136, 5195, 5097, 5058, 5092, 5135, 5210, 5089, 5104, 5074, 5101, 5063, 5095, 5201, 5096, 5127, 5114, 5123, 5122, 5083, 5187, 5181, 5171, 5070, 5077, 5108, 5079, 5061, 5100, 5118, 5090, 5116, 5082, 5168, 5203, 5149, 5169, 5105, 5069, 5138, 5146, 5117, 5128, 5144, 5202]],"5200": [0.19746, [5167, 5180, 5194, 5154, 5166, 5193, 5179]],"5180": [0.15423, [5101, 5198, 5060, 5064, 5104, 5197, 5066, 5160, 5186, 5110, 5127, 5087, 5210, 5203, 5200, 5118, 5096, 5116, 5069, 5128, 5125, 5187, 5075, 5070, 5086, 5159, 5082, 5201, 5202, 5100, 5113, 5095, 5058, 5089, 5092, 5183, 5061, 5148, 5114, 5097, 5149, 5117, 5144, 5155, 5073, 5090, 5084, 5067, 5088, 5105, 5119, 5123, 5147, 5094, 5143, 5146, 5188, 5136, 5133, 5158, 5122, 5071, 5099, 5079, 5108, 5126, 5161, 5195, 5077, 5138, 5185, 5102, 5063, 5135, 5083, 5182, 5156, 5132, 5093, 5074]],"5101": [0.18455, [5180, 5209, 5167, 5194]],"5209": [0.38275, [5127, 5104, 5094, 5122, 5128, 5084, 5095, 5093, 5172, 5069, 5070, 5149, 5186, 5074, 5089, 5086, 5126, 5174, 5133, 5105, 5071, 5117, 5123, 5171, 5077, 5138, 5097, 5100, 5102, 5156, 5195, 5161, 5067, 5088, 5066, 5158, 5125, 5057, 5155, 5099, 5119, 5101, 5143, 5173, 5187, 5087, 5185, 5073, 5147, 5079, 5063, 5188, 5116, 5118, 5146, 5060, 5064, 5092, 5132, 5082, 5144, 5183, 5160, 5090, 5182, 5148, 5110, 5113, 5083, 5159, 5061, 5114, 5075, 5058, 5181, 5096, 5108, 5168, 5169, 5136, 5135]],"5127": [0.29529, [5209, 5194, 5180, 5167]],"5194": [0.22692999, [5156, 5161, 5132, 5090, 5203, 5172, 5117, 5210, 5077, 5088, 5173, 5200, 5168, 5104, 5074, 5066, 5063, 5089, 5064, 5099, 5095, 5108, 5174, 5127, 5158, 5060, 5079, 5116, 5201, 5160, 5092, 5084, 5123, 5135, 5069, 5155, 5061, 5070, 5058, 5128, 5118, 5181, 5202, 5114, 5125, 5097, 5094, 5075, 5138, 5169, 5197, 5102, 5126, 5093, 5096, 5110, 5198, 5171, 5133, 5101, 5086, 5071, 5067, 5087, 5082, 5073, 5113, 5119, 5159, 5122, 5100, 5105, 5136, 5057, 5083]],"5156": [0.14695999, [5194, 5209, 5180]],"5161": [0.22918999, [5194, 5209, 5180]],"5132": [0.24288002, [5194, 5167, 5209, 5180]],"5090": [0.28458, [5194, 5180, 5167, 5209]],"5203": [0.26022, [5180, 5194, 5167]],"5172": [0.33808, [5209, 5194, 5167]],"5117": [0.42330998, [5194, 5209, 5180, 5167]],"5210": [0.15190999, [5194, 5180, 5167]],"5077": [0.23533002, [5194, 5166, 5167, 5209, 5208, 5193, 5154, 5180, 5179]],"5166": [0.26979, [5125, 5086, 5171, 5099, 5077, 5146, 5069, 5092, 5200, 5116, 5073, 5185, 5135]],"5125": [0.17906, [5166, 5180, 5179, 5208, 5167, 5209, 5154, 5194, 5193]],"5179": [0.25639, [5125, 5086, 5158, 5116, 5135, 5092, 5146, 5099, 5200, 5073, 5069, 5077, 5185]],"5086": [0.14552, [5154, 5166, 5180, 5179, 5209, 5193, 5208, 5167, 5194]],"5154": [0.39229, [5086, 5158, 5200, 5069, 5171, 5099, 5125, 5116, 5077, 5135, 5073, 5092]],"5158": [0.18799, [5208, 5154, 5179, 5194, 5209, 5180, 5193]],"5208": [0.19962, [5185, 5158, 5135, 5125, 5086, 5171, 5116, 5146, 5077, 5099, 5073, 5092, 5069]],"5185": [0.18617001, [5208, 5167, 5209, 5166, 5180, 5179]],"5135": [0.16815, [5208, 5193, 5179, 5194, 5154, 5167, 5180, 5166, 5209]],"5193": [0.35146, [5069, 5171, 5135, 5086, 5073, 5092, 5125, 5077, 5158, 5116, 5200, 5099]],"5069": [0.36273, [5209, 5180, 5193, 5154, 5166, 5194, 5167, 5208, 5179]],"5171": [0.16397001, [5166, 5193, 5167, 5154, 5209, 5208, 5194]],"5073": [0.1515, [5180, 5193, 5166, 5209, 5167, 5208, 5154, 5179, 5194]],"5092": [0.31272, [5180, 5166, 5194, 5179, 5193, 5209, 5167, 5208, 5154]],"5116": [0.21493001, [5180, 5194, 5179, 5208, 5166, 5154, 5209, 5167, 5193]],"5099": [0.16049, [5167, 5166, 5194, 5154, 5209, 5208, 5180, 5179, 5193]],"5146": [0.46793, [5166, 5208, 5180, 5209, 5179, 5167]],"5088": [0.2748, [5194, 5167, 5180, 5209]],"5173": [0.26645, [5194, 5167, 5209]],"5168": [0.26022, [5194, 5167, 5209]],"5104": [0.1656, [5194, 5180, 5209, 5167]],"5074": [0.32369, [5194, 5209, 5167, 5180]],"5066": [0.14357999, [5194, 5167, 5209, 5180]],"5063": [0.35146, [5194, 5209, 5180, 5167]],"5089": [0.21917, [5209, 5194, 5180, 5167]],"5064": [0.15555, [5194, 5180, 5167, 5209]],"5095": [0.17881, [5209, 5194, 5180, 5167]],"5108": [0.14102, [5194, 5167, 5180, 5209]],"5174": [0.27183002, [5209, 5194, 5167]],"5060": [0.3356, [5180, 5194, 5167, 5209]],"5079": [0.37183002, [5194, 5167, 5209, 5180]],"5201": [0.16687, [5180, 5194, 5167]],"5160": [0.14332, [5194, 5180, 5209]],"5084": [0.14001, [5209, 5167, 5194, 5180]],"5123": [0.26744002, [5167, 5209, 5194, 5180]],"5155": [0.38371998, [5180, 5194, 5209]],"5061": [0.20495, [5180, 5167, 5194, 5209]],"5070": [0.53992, [5209, 5180, 5167, 5194]],"5058": [0.19286999, [5180, 5194, 5167, 5209]],"5128": [0.26995, [5209, 5180, 5194, 5167]],"5118": [0.3105, [5180, 5167, 5194, 5209]],"5181": [0.16092, [5167, 5194, 5209]],"5202": [0.26385, [5180, 5194, 5167]],"5114": [0.41982, [5180, 5194, 5209, 5167]],"5097": [0.16099, [5180, 5209, 5194, 5167]],"5094": [0.15715, [5209, 5167, 5180, 5194]],"5075": [0.25897998, [5180, 5167, 5194, 5209]],"5138": [0.17424999, [5209, 5194, 5180, 5167]],"5169": [0.29984, [5194, 5167, 5209]],"5197": [0.22493999, [5167, 5180, 5194]],"5102": [0.20172998, [5209, 5167, 5194, 5180]],"5126": [0.37579, [5167, 5209, 5180, 5194]],"5093": [0.24342, [5209, 5167, 5194, 5180]],"5096": [0.18549, [5180, 5194, 5167, 5209]],"5110": [0.43857998, [5167, 5180, 5194, 5209]],"5198": [0.15463999, [5180, 5167, 5194]],"5133": [0.1452, [5167, 5209, 5180, 5194]],"5071": [0.34127, [5209, 5167, 5180, 5194]],"5067": [0.14769, [5167, 5209, 5180, 5194]],"5087": [0.14578, [5209, 5167, 5180, 5194]],"5082": [0.16973999, [5180, 5167, 5209, 5194]],"5113": [0.23596999, [5180, 5167, 5209, 5194]],"5119": [0.38567, [5167, 5180, 5209, 5194]],"5159": [0.20734999, [5180, 5209, 5194]],"5122": [0.19487, [5209, 5167, 5180, 5194]],"5100": [0.20705, [5180, 5209, 5167, 5194]],"5105": [0.29874, [5209, 5180, 5167, 5194]],"5136": [0.18868999, [5180, 5167, 5209, 5194]],"5083": [0.16049, [5167, 5194, 5180, 5209]],"5149": [0.20357999, [5209, 5180, 5167]],"5186": [0.54447997, [5167, 5209, 5180]],"5195": [0.1854, [5209, 5167, 5180]],"5143": [0.18037, [5180, 5209, 5167]],"5187": [0.2983, [5180, 5167, 5209]],"5147": [0.29257, [5180, 5209, 5167]],"5188": [0.51616, [5167, 5180, 5209]],"5144": [0.15757, [5180, 5209, 5167]],"5183": [0.55429, [5180, 5167, 5209]],"5182": [0.14815, [5167, 5209, 5180]],"5148": [0.8, [5180, 5167, 5209]]}
#d_inc = {"4793": [0.17841001, [4743]],"4752": [0.15265, [4802]],"4749": [0.16006, [4799]],"4728": [0.18294999, [4791, 4783]],"4778": [0.14982, [4770, 4702]],"4782": [0.2773, [4776, 4818, 4803]],"4727": [0.27586, [4803, 4776, 4818]],"4746": [0.21, [4776, 4818, 4789]],"4694": [0.15197, [4776, 4803, 4789]],"4745": [0.32934, [4789, 4818, 4776]],"4701": [0.19214, [4789, 4803, 4818]],"4698": [0.51794, [4789, 4803, 4818]],"4810": [0.2893, [4803, 4776, 4789]],"4747": [0.52933, [4818, 4776, 4789]],"4769": [0.41382998, [4803, 4818, 4789]],"4696": [0.32424, [4776, 4803, 4789]],"4700": [0.23905, [4818, 4803, 4789]],"4795": [0.30275, [4818, 4789, 4776]],"4820": [0.18345, [4776, 4789, 4803]],"4797": [0.14895001, [4776, 4818, 4789]],"4796": [0.15279, [4776, 4789, 4818]],"4808": [0.22516999, [4789, 4803, 4776]],"4688": [0.32314, [4789, 4803, 4776]],"4805": [0.39282, [4789, 4818, 4776]],"4811": [0.31677002, [4789, 4803, 4776]],"4766": [0.22704999, [4789, 4818, 4803]],"4768": [0.19197, [4803, 4818, 4789]],"4697": [0.33999, [4776, 4803, 4789]],"4783": [0.46363002, [4728, 4776, 4803, 4818]],"4791": [0.21774001, [4728, 4818, 4776, 4803]],"4707": [0.26827, [4776, 4803, 4818, 4789]],"4693": [0.1597, [4776, 4789, 4803, 4818]],"4713": [0.27046, [4803, 4818, 4776, 4789]],"4737": [0.26979, [4818, 4776, 4789, 4803]],"4711": [0.27876002, [4803, 4776, 4789, 4818]],"4735": [0.46052998, [4818, 4776, 4803, 4789]],"4736": [0.26744002, [4789, 4803, 4776, 4818]],"4743": [0.43614, [4793, 4776, 4789, 4818]],"4718": [0.30929, [4789, 4818, 4803, 4776]],"4706": [0.40693998, [4789, 4776, 4803, 4818]],"4719": [0.41189998, [4789, 4818, 4776, 4803]],"4703": [0.53136003, [4789, 4803, 4818, 4776]],"4705": [0.20675, [4803, 4818, 4776, 4789]],"4709": [0.17338, [4818, 4803, 4776, 4789]],"4702": [0.18354, [4778, 4789, 4818, 4803]],"4770": [0.22321999, [4778, 4803, 4818, 4789]],"4757": [0.31574, [4818, 4803, 4789, 4776]],"4733": [0.14217, [4818, 4776, 4789, 4803]],"4689": [0.23775999, [4776, 4803, 4789, 4818]],"4756": [0.40574002, [4818, 4789, 4803, 4776]],"4758": [0.34658, [4818, 4789, 4803, 4776]],"4712": [0.13926001, [4818, 4789, 4803, 4776]],"4720": [0.22095, [4803, 4789, 4776, 4818]],"4754": [0.14422, [4789, 4818, 4776, 4803]],"4730": [0.19241, [4773, 4723, 4750, 4800, 4815, 4761]],"4723": [0.68113, [4785, 4739, 4760, 4730, 4799, 4814]],"4785": [0.48588, [4723, 4761, 4815, 4800, 4750, 4773]],"4722": [0.27149, [4786, 4773, 4731, 4815, 4761, 4800, 4750]],"4814": [0.15211001, [4731, 4750, 4786, 4761, 4723, 4773, 4800]],"4760": [0.14422, [4723, 4786, 4815, 4750, 4731, 4800, 4773]],"4799": [0.1793, [4749, 4731, 4773, 4786, 4761, 4723, 4815]],"4739": [0.15136, [4723, 4815, 4800, 4786, 4773, 4761, 4750, 4731]],"4751": [0.14033, [4786, 4742, 4792, 4815, 4773, 4731, 4761, 4763, 4775, 4817]],"4801": [0.34225, [4815, 4786, 4775, 4761, 4742, 4763, 4817, 4792, 4773, 4731]],"4787": [0.28419, [4742, 4800, 4775, 4761, 4806, 4817, 4815, 4773, 4750, 4763, 4802]],"4762": [0.22163, [4817, 4742, 4786, 4775, 4792, 4800, 4802, 4806, 4731, 4750, 4773, 4815]],"4774": [0.46155, [4750, 4742, 4817, 4800, 4806, 4786, 4731, 4792, 4802, 4761, 4815, 4763]],"4816": [0.25312, [4802, 4786, 4763, 4800, 4792, 4731, 4742, 4750, 4761, 4806, 4775, 4773]],"4741": [0.22799, [4815, 4750, 4773, 4817, 4802, 4792, 4763, 4775, 4731, 4806, 4800, 4761, 4786]],"4822": [0.1744, [4780, 4776, 4789, 4734, 4725, 4744, 4710, 4717, 4803, 4699, 4704, 4794, 4755, 4690, 4767, 4692]],"4819": [0.60299003, [4744, 4755, 4780, 4794, 4704, 4690, 4717, 4725, 4803, 4699, 4734, 4776, 4767, 4789, 4710, 4692]],"4790": [0.19214, [4818, 4710, 4717, 4809, 4755, 4704, 4776, 4692, 4794, 4690, 4734, 4767, 4744, 4803, 4695, 4699]],"4753": [0.22516999, [4695, 4734, 4690, 4767, 4704, 4692, 4763, 4817, 4725, 4809, 4775, 4755, 4710, 4699, 4780, 4717]],"4804": [0.1719, [4704, 4717, 4710, 4776, 4780, 4734, 4809, 4755, 4690, 4818, 4695, 4789, 4725, 4767, 4699, 4692]],"4764": [0.20337999, [4710, 4794, 4809, 4692, 4717, 4699, 4725, 4780, 4744, 4817, 4767, 4704, 4690, 4695, 4802, 4775, 4734]],"4744": [0.28153998, [4819, 4817, 4731, 4761, 4742, 4775, 4822, 4773, 4786, 4765, 4764, 4792, 4818, 4789, 4790, 4815, 4776, 4763]],"4794": [0.20525, [4764, 4742, 4761, 4819, 4763, 4765, 4817, 4789, 4818, 4790, 4792, 4775, 4822, 4773, 4776, 4731, 4815, 4786]],"4765": [0.46576, [4695, 4699, 4767, 4809, 4725, 4717, 4789, 4704, 4692, 4794, 4776, 4744, 4780, 4803, 4710, 4734, 4690, 4818]],"4806": [0.25137, [4692, 4690, 4767, 4699, 4787, 4710, 4774, 4704, 4695, 4734, 4762, 4717, 4809, 4725, 4741, 4816, 4780, 4755]],"4792": [0.28829998, [4717, 4809, 4699, 4695, 4734, 4762, 4755, 4794, 4744, 4774, 4751, 4704, 4692, 4816, 4801, 4767, 4741, 4710, 4690]],"4742": [0.2397, [4787, 4692, 4774, 4762, 4794, 4809, 4744, 4725, 4690, 4695, 4801, 4767, 4751, 4780, 4755, 4704, 4710, 4816, 4699, 4717]],"4780": [0.19054, [4822, 4776, 4815, 4800, 4817, 4775, 4819, 4802, 4803, 4818, 4764, 4765, 4742, 4804, 4761, 4750, 4763, 4773, 4753, 4806]],"4725": [0.15096, [4773, 4763, 4775, 4765, 4742, 4822, 4776, 4819, 4764, 4753, 4818, 4800, 4803, 4750, 4761, 4802, 4804, 4817, 4806, 4815]],"4809": [0.16605, [4750, 4789, 4792, 4765, 4764, 4742, 4790, 4773, 4802, 4731, 4803, 4761, 4753, 4786, 4804, 4776, 4806, 4763, 4800, 4775]],"4695": [0.16353, [4776, 4786, 4761, 4753, 4773, 4765, 4792, 4742, 4803, 4731, 4750, 4806, 4800, 4763, 4802, 4775, 4804, 4764, 4789, 4790]],"4755": [0.18498, [4775, 4817, 4819, 4750, 4731, 4790, 4792, 4776, 4815, 4789, 4804, 4753, 4742, 4822, 4818, 4786, 4803, 4773, 4800, 4806, 4802]],"4699": [0.18328, [4817, 4792, 4765, 4800, 4806, 4764, 4761, 4815, 4763, 4819, 4822, 4802, 4750, 4786, 4731, 4742, 4803, 4818, 4753, 4789, 4790, 4804]],"4767": [0.15190999, [4815, 4802, 4806, 4765, 4753, 4818, 4742, 4764, 4792, 4786, 4803, 4817, 4790, 4800, 4763, 4822, 4731, 4819, 4804, 4750, 4789, 4761]],"4802": [0.27046, [4752, 4690, 4704, 4767, 4816, 4776, 4710, 4780, 4809, 4818, 4734, 4699, 4774, 4762, 4741, 4695, 4692, 4725, 4717, 4789, 4787, 4764, 4755]],"4800": [0.14474, [4787, 4734, 4699, 4774, 4780, 4717, 4739, 4704, 4785, 4695, 4762, 4725, 4816, 4692, 4760, 4767, 4722, 4730, 4755, 4809, 4814, 4741, 4690, 4710]],"4734": [0.15849, [4817, 4818, 4753, 4776, 4800, 4792, 4822, 4775, 4750, 4786, 4802, 4763, 4815, 4804, 4806, 4789, 4761, 4773, 4819, 4765, 4790, 4731, 4803, 4764]],"4817": [0.19432, [4734, 4744, 4755, 4762, 4699, 4717, 4774, 4710, 4780, 4787, 4741, 4794, 4753, 4776, 4801, 4764, 4767, 4789, 4725, 4704, 4690, 4751, 4692, 4803]],"4786": [0.24248, [4695, 4816, 4801, 4690, 4722, 4692, 4760, 4774, 4762, 4710, 4704, 4744, 4739, 4717, 4734, 4751, 4799, 4809, 4699, 4814, 4767, 4755, 4741, 4794]],"4775": [0.25654, [4755, 4692, 4725, 4704, 4787, 4818, 4801, 4780, 4734, 4710, 4744, 4762, 4690, 4789, 4753, 4794, 4803, 4695, 4741, 4751, 4764, 4717, 4816, 4809]],"4750": [0.19441, [4809, 4755, 4774, 4814, 4717, 4695, 4741, 4690, 4734, 4710, 4699, 4730, 4692, 4780, 4760, 4725, 4816, 4762, 4787, 4785, 4722, 4767, 4739, 4704]],"4731": [0.37097, [4690, 4799, 4704, 4744, 4814, 4755, 4695, 4774, 4809, 4722, 4692, 4699, 4816, 4762, 4751, 4760, 4734, 4741, 4767, 4710, 4794, 4717, 4739, 4801]],"4710": [0.69067997, [4764, 4776, 4817, 4790, 4802, 4806, 4775, 4773, 4786, 4822, 4763, 4804, 4750, 4789, 4765, 4818, 4742, 4753, 4792, 4761, 4803, 4731, 4815, 4800, 4819]],"4763": [0.55689, [4704, 4692, 4725, 4803, 4794, 4818, 4699, 4710, 4801, 4753, 4734, 4816, 4717, 4776, 4695, 4741, 4780, 4787, 4774, 4751, 4767, 4690, 4809, 4789, 4744]],"4717": [0.44896, [4792, 4789, 4817, 4804, 4818, 4765, 4790, 4800, 4750, 4764, 4822, 4819, 4776, 4786, 4763, 4773, 4806, 4742, 4802, 4803, 4761, 4731, 4775, 4753, 4815]],"4704": [0.24909, [4804, 4763, 4802, 4731, 4775, 4818, 4819, 4765, 4806, 4786, 4789, 4753, 4815, 4800, 4790, 4773, 4792, 4822, 4742, 4761, 4764, 4817, 4803, 4776, 4750]],"4815": [0.13944, [4767, 4801, 4739, 4780, 4741, 4692, 4760, 4787, 4699, 4704, 4785, 4734, 4755, 4799, 4751, 4774, 4690, 4722, 4710, 4725, 4730, 4744, 4762, 4794, 4717]],"4692": [0.18062, [4806, 4775, 4742, 4763, 4786, 4764, 4815, 4765, 4761, 4753, 4731, 4790, 4789, 4792, 4800, 4773, 4750, 4802, 4818, 4803, 4776, 4822, 4804, 4819, 4817]],"4690": [0.14487, [4773, 4731, 4802, 4806, 4818, 4753, 4786, 4789, 4742, 4819, 4750, 4775, 4804, 4790, 4792, 4822, 4815, 4776, 4763, 4764, 4761, 4765, 4800, 4817, 4803]],"4761": [0.27339, [4695, 4744, 4787, 4794, 4785, 4801, 4699, 4692, 4809, 4780, 4799, 4734, 4814, 4725, 4774, 4710, 4704, 4751, 4722, 4690, 4816, 4739, 4717, 4741, 4730, 4767]],"4773": [0.1726, [4690, 4695, 4730, 4725, 4722, 4799, 4710, 4809, 4741, 4787, 4744, 4704, 4734, 4717, 4794, 4692, 4751, 4762, 4780, 4760, 4814, 4755, 4739, 4785, 4816, 4801]],
#"4818": [0.16361001, [4766, 4725, 4758, 4790, 4734, 4735, 4747, 4712, 4733, 4795, 4690, 4757, 4717, 4709, 4775, 4797, 4704, 4743, 4700, 4737, 4768, 4703, 4754, 4767, 4746, 4763, 4718, 4802, 4805, 4780, 4713, 4756, 4720, 4794, 4791, 4705, 4710, 4744, 4711, 4770, 4769, 4727, 4719, 4804, 4707, 4698, 4745, 4699, 4755, 4782, 4692, 4701, 4702, 4783, 4706, 4796, 4693, 4765, 4736, 4689]],"4803": [0.20846, [4768, 4705, 4810, 4703, 4720, 4698, 4763, 4757, 4695, 4712, 4770, 4780, 4736, 4809, 4713, 4697, 4700, 4819, 4808, 4822, 4765, 4758, 4696, 4783, 4694, 4689, 4775, 4769, 4766, 4725, 4756, 4820, 4699, 4709, 4791, 4717, 4701, 4719, 4733, 4782, 4811, 4734, 4755, 4704, 4692, 4693, 4754, 4688, 4690, 4817, 4727, 4707, 4735, 4711, 4706, 4718, 4767, 4710, 4737, 4702, 4790]],"4776": [0.30095, [4697, 4734, 4797, 4810, 4725, 4820, 4817, 4689, 4712, 4809, 4791, 4795, 4754, 4709, 4747, 4757, 4811, 4796, 4695, 4707, 4746, 4780, 4743, 4710, 4802, 4694, 4733, 4693, 4782, 4822, 4735, 4696, 4727, 4783, 4737, 4706, 4720, 4765, 4717, 4755, 4804, 4790, 4713, 4763, 4705, 4711, 4719, 4745, 4703, 4819, 4690, 4794, 4805, 4736, 4704, 4692, 4718, 4688, 4758, 4744, 4808, 4756]],"4789": [0.2748, [4811, 4805, 4809, 4688, 4754, 4766, 4690, 4720, 4822, 4712, 4704, 4808, 4794, 4758, 4796, 4797, 4775, 4692, 4755, 4734, 4820, 4756, 4795, 4689, 4817, 4733, 4757, 4804, 4770, 4709, 4700, 4699, 4696, 4697, 4769, 4695, 4802, 4747, 4763, 4705, 4810, 4819, 4703, 4717, 4719, 4706, 4718, 4698, 4743, 4765, 4701, 4736, 4702, 4735, 4710, 4711, 4745, 4768, 4694, 4744, 4737, 4713, 4746, 4693, 4707, 4767]]}

"""
def decrease(dico):
    l_deso = list(dico.items())
    l_croi = [l_deso[0]]
    for i in range(1,len(l_deso)):
        add = False
        for j in range (0,len(l_croi)):
            if len(l_deso[i][1][1]) >= len(l_croi[j][1][1]):
                l_croi.insert(j,l_deso[i])
                add = True
                break
        if add == False:
            l_croi.insert(j+1,l_deso[i])
    dico_output = {}
    for elem in l_croi:
        dico_output[elem[0]] = elem[1]
    return dico_output
"""
#d_dec = decrease(d_inc)


"""
print(f'taille = {len(d_inc)} \n')

start = time.time()
output1 = max_sum_list_int(d_inc,build_sol(d_inc))
end = time.time()
elapsed = end - start
print(f'Temps d\'exécution inc : {elapsed:.5}s')

start = time.time()
output1 = max_sum_list_int(d_dec,build_sol(d_dec))
end = time.time()
elapsed = end - start
print(f'Temps d\'exécution dec : {elapsed:.5}s')

"""

"""
start = time.time()
#print(max_sum_list_int(dico,build_sol(dico)))
output1 = max_sum_list_int(dico,build_sol(dico))
end = time.time()
elapsed = end - start
print(f'Temps d\'exécution : {elapsed:.5}s')

start = time.time()
output2 = sum_weight(dico2,dico2)
end = time.time()
elapsed2 = end - start
print(f'Temps d\'exécution : {elapsed2:.5}s')

print(output1[0]+output2)


total = elapsed + elapsed2
print(f'Temps total d\'exécution : {total:.5}s')
"""


##############################################################################################################
##############################################################################################################
###################################  OPTIMISATION 2 - Algorithme 3+ ########################################## 


##################################### LOAD the data for OPTI 2 ###############################################
#with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico.json', 'r') as f: 	
with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico2.5kClear.json', 'r') as f1: 	
    l_dico = json.load(f1)
#with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico2.5kClear5.json', 'r') as f22: 	
#    l_dico2 = json.load(f22)


#################################### Apply Opti 1 on the list of dico ########################################
def solutionForList(l_dico):
	output = [0,[]]
	i = 0
	size = len(l_dico["list"])
	for dico in l_dico["list"]:
		print(f'{i} / {size}')
		val,liste = max_sum_list_int(dico,build_sol(dico))
		output[0] += val
		output[1] += liste
		i+=1
	return output


start = time.time()
output1 = solutionForList(l_dico)
end = time.time()
elapsed1 = end - start
print(output1[0])
print(f'Temps d\'exécution : {elapsed1:.5}s\n')

start = time.time()
output2 = sum_weight(dico,dico)
print(output2)
end = time.time()
elapsed2 = end - start
print(f'Temps d\'exécution : {elapsed2:.5}s')

print(output1[0]+output2)

#print(output1[1])
print(f'Temps d\'exécution total : {elapsed1 + elapsed2:.5}s')




"""

liste_i = [10, 12, 16, 19, 20, 22, 24, 25, 27, 31, 33, 37, 38, 40, 45, 48, 54, 55, 57, 64, 65, 67, 73, 43, 51, 60, 70, 100, 89, 93, 96, 105, 107, 149, 123, 113, 138, 145, 153, 162, 165, 158, 128, 134, 141, 119, 217, 234, 235, 236, 237, 238, 241, 244, 245, 249, 255, 256, 261, 262, 263, 294, 299, 319, 320, 426, 423, 424, 433, 429, 456, 457, 459, 462, 580, 581, 582, 663, 667, 752, 753, 960, 979, 990, 969, 986, 975, 935, 941, 948, 956, 930, 1015, 1129, 1141, 1010, 1012, 1019, 1024, 1030, 1037, 1045, 1054, 1075, 1087, 1100, 1114, 1132, 1027, 1040, 1048, 1057, 1067, 1078, 1090, 1103, 1017, 1021, 1026, 1032, 1039, 1047, 1056, 1066, 1077, 1089, 1102, 1131, 1145, 1157, 1166, 1167, 1319, 1202, 1263, 1317, 1188, 1208, 1215, 1223, 1232, 1252, 1288, 1197, 1242, 1275, 1302, 1362, 1365, 1374, 1380, 1387, 1419, 1413, 1416, 1472, 1474, 1572, 1570, 1571, 1565, 1621, 1622, 1666, 1709, 1712, 1713, 1716, 1721, 1722, 1723, 1727, 1728, 1729, 1734, 1735, 1736, 1742, 1743, 1744, 1752, 1753, 1717, 1770, 1707, 1710, 1714, 1725, 1730, 1732, 1737, 1740, 1745, 1749, 1754, 1769, 1704, 1719, 1724, 1718, 1739, 1747, 1756, 1757, 1766, 1764, 1811, 4288, 4289, 4310, 4314, 4315, 4360, 4386, 4387, 4431, 4432, 4434, 4437, 4441, 4445, 4449, 4453, 4545, 4538, 4536, 4541, 4550, 4566, 4569, 4556, 4565, 4574, 4576, 4557, 4577, 4559, 4562, 4571, 4580, 4582, 4583, 4641, 4645, 4646, 4650, 4651, 4657, 4663, 4664, 4671, 4672, 4680, 4681, 4676, 4675, 4684, 4695, 4744, 4730, 4715, 4785, 4722, 4760, 4799, 4814, 4739, 4751, 4801, 4787, 4762, 4774, 4816, 4741, 4794, 4725, 4780, 4809, 4755, 4699, 4767, 4734, 4690, 4692, 4704, 4710, 4717, 4726, 4783, 4791, 4749, 4752, 4779, 4733, 4735, 4736, 4737, 4743, 4754, 4756, 4757, 4758, 4770, 4793, 4952, 4965, 4979, 4994, 5010, 5027, 5112, 5121, 5130, 5140, 5151, 5163, 5176, 5190, 5131, 5141, 5152, 5153, 5164, 5165, 5177, 5178, 5191, 5192, 5206, 5219, 5222, 5226, 5343, 5322, 5323, 5325, 5327, 5328, 5331, 5336, 5337, 5344, 5351, 5338, 5333, 5329, 5350, 5387, 5388, 5392, 5393, 5395, 5398, 5458, 5633, 5532, 5545, 5559, 5574, 5590, 5607, 5625, 5644, 5664, 5561, 5576, 5592, 5609, 5627, 5646, 5666, 5459, 5465, 5472, 5489, 5499, 5510, 5517, 5522, 5529, 5535, 5542, 5549, 5556, 5564, 5571, 5615, 5622, 5669, 5649, 5612, 5630, 5687, 5714, 5722, 5731, 5741, 5707, 5688, 5699, 5700, 5705, 5706, 5712, 5713, 5720, 5721, 5729, 5730, 5739, 5740, 5743, 5733, 5724, 5751, 5752, 5807, 5808, 6002, 6003, 6008, 6009, 6081, 6082, 6099, 6100, 6203, 6204, 6205, 6206, 6207, 6209, 6215, 6216, 6217, 6218, 6219, 6221, 6226, 6228, 6229, 6230, 6231, 6232, 6234, 6208, 6233, 6202, 6214, 6227, 6138, 6143, 6147, 6152, 6158, 6193, 6194, 6195, 6197, 6198, 6140, 6141, 6144, 6145, 6148, 6149, 6153, 6154, 6155, 6156, 6159, 6160, 6161, 6162, 6163, 6165, 6166, 6167, 6168, 6169, 6170, 6171, 6174, 6175, 6176, 6177, 6178, 6179, 6183, 6184, 6185, 6186, 6187, 6188, 6181, 6191, 6136, 6137, 6142, 6146, 6151, 6157, 6139, 6172, 6445, 6448, 6436, 6440, 6454, 6459, 6477, 6483, 6490, 6488, 6466, 6470, 6475, 6952, 6956, 6961, 6967, 6974, 6982, 6991, 7001, 7012, 7024, 7037, 7051, 7020, 7032, 7017, 7018, 7029, 7030, 7042, 7043, 6992, 7013, 7025, 7033, 7038, 7046, 7009, 7021, 7034, 7047, 3, 7048, 6946, 6964, 6971, 6979, 6998, 7052, 6943, 6944, 6953, 6958, 7006, 7056, 7057, 6968, 6975, 7002, 6957, 6962, 391, 396, 402, 409, 498, 527, 534, 543, 546, 553, 483, 489, 493, 504, 511, 518, 519, 526, 808, 813, 807, 809, 976, 981, 987, 992, 999, 1004, 936, 942, 949, 957, 966, 1567, 1853, 1857, 1862, 1855, 1848, 1851, 1860, 4539, 4537, 4540, 4544, 4534, 4549, 4728, 4702, 4703, 4705, 4706, 4707, 4709, 4711, 4712, 4713, 4718, 4719, 4720, 4854, 4841, 4847, 4827, 4829, 4832, 4836, 6164, 6173, 6434, 6435, 6438, 6439, 6443, 6444, 6428, 6429, 6430, 6431, 6432, 6449, 6450, 6469, 6474, 6480, 6462, 6465, 6487, 6473, 6479, 6461, 6464, 6468, 6634, 6640, 6647, 6664, 6674, 6685, 6696, 6703, 6728, 6708, 6710, 6713, 6717, 6722, 49, 58, 68, 79, 34, 41, 1849, 1858, 4604, 4610, 4617, 4620, 4625, 4628, 4599, 4688, 4694, 4696, 4697, 4698, 4700, 4701, 4727, 4745, 4746, 4747, 4766, 4768, 4769, 4782, 4795, 4796, 4797, 4805, 4808, 4810, 4811, 4820, 4689, 4693, 5057, 5143, 5144, 5147, 5148, 5149, 5155, 5156, 5159, 5160, 5161, 5168, 5169, 5172, 5173, 5174, 5181, 5182, 5183, 5186, 5187, 5188, 5195, 5197, 5198, 5201, 5202, 5203, 5210, 5058, 5060, 5061, 5063, 5064, 5066, 5067, 5070, 5071, 5074, 5075, 5079, 5082, 5083, 5084, 5087, 5088, 5089, 5090, 5093, 5094, 5095, 5096, 5097, 5100, 5101, 5102, 5104, 5105, 5108, 5110, 5113, 5114, 5117, 5118, 5119, 5122, 5123, 5126, 5127, 5128, 5132, 5133, 5136, 5138, 5146, 5185, 5158, 5171, 5200, 5069, 5073, 5077, 5086, 5092, 5099, 5116, 5125, 5135, 5460, 5461, 5481, 5482, 5484, 5598, 5599, 5601, 5616, 5617, 5619, 5635, 5636, 5638, 5655, 5656, 5658, 5451, 5455, 5456, 5467, 5469, 5473, 5474, 5476, 5490, 5491, 5493, 5500, 5501, 5503, 5511, 5512, 5514, 5524, 5536, 5537, 5539, 5550, 5551, 5553, 5565, 5566, 5568, 5581, 5582, 5584, 5623, 5642, 5662, 5605, 5507, 5518, 5530, 5543, 5572, 5480, 5580, 5587, 5604, 5641, 5654, 5661, 5447, 5450, 5454, 5824, 5825, 6909, 6912, 6927, 6932, 6934, 6939, 6914, 6921, 6936, 6918, 6929, 6923, 6993, 7014, 7019, 7026, 7039, 36, 44, 53, 63, 74, 8, 9, 11, 14, 18, 23, 29, 247, 252, 258, 260, 265, 267, 273, 243, 1194, 1203, 1264, 1276, 1289, 1303, 1318, 1191, 1198, 1209, 1216, 1224, 1233, 1243, 1253, 5215, 5217, 5220, 5224, 5228, 5214, 5330, 5334, 5335, 5339, 5340, 5341, 5345, 5346, 5347, 5352, 5353, 5354, 5709, 5717, 5726, 5736, 5696, 6192, 6794, 6803, 6813, 6824, 6836, 6795, 6988, 124, 125, 159, 160, 164, 120, 129, 130, 131, 135, 136, 137, 142, 143, 144, 150, 151, 152, 155, 163, 146, 154, 4982, 4998, 5015, 4967, 4862, 4863, 4865, 4868, 4872, 4877, 4883, 4890, 4898, 4907, 4917, 4928, 4940, 4953, 931, 937, 944, 952, 971, 982, 993, 916, 917, 919, 922, 961, 994, 1005, 1006, 5560, 5575, 5591, 5608, 5626, 5645, 5665, 5546, 5686, 5690, 5695, 5701, 5708, 5716, 5725, 5735, 5680, 5681, 5683, 6630, 6636, 6642, 6643, 6649, 6650, 6660, 6666, 6667, 6668, 6670, 6676, 6677, 6678, 6680, 6681, 6687, 6688, 6689, 6691, 6692, 6698, 6699, 6700, 6702, 6615, 6616, 6618, 6621, 6625, 6651, 6657, 6658, 6659, 771, 774, 778, 783, 786, 789, 792, 793, 797, 799, 800, 775, 779, 784, 790, 1062, 1072, 1073, 1083, 1095, 1108, 1122, 1137, 1153, 1084, 1092, 1096, 1105, 1109, 1134, 1138, 1059, 1069, 1119, 1123, 1150, 1154, 1035, 1042, 1050, 1617, 1662, 1597, 1599, 1602, 1606, 1641, 1596, 1624, 1632, 5694, 6878, 6879, 6881, 6882, 6883, 6886, 6887, 6844, 6846, 6848, 6849, 6851, 6852, 6853, 6855, 6856, 6857, 6858, 6860, 6861, 6862, 6864, 6866, 6867, 6868, 6871, 6873, 6874, 6875, 6843, 1193, 1759, 6291, 6294, 6295, 6299, 6300, 6309, 6310, 6311, 6313, 6316, 6317, 6318, 6321, 6333, 6334, 6339, 6340, 6304, 6305, 6324, 6326, 6330, 6332, 6315, 6323, 6290, 6293, 6297, 6308, 6302, 6496, 6510, 6511, 6512, 6516, 6517, 6518, 6523, 6524, 6525, 6531, 6532, 6533, 6538, 6540, 6541, 6542, 6547, 6550, 6551, 6552, 6557, 6561, 6562, 6563, 6568, 6573, 6574, 6575, 6580, 6600, 6601, 6602, 6607, 6612, 6499, 6501, 6502, 6503, 6505, 6506, 6507, 6586, 6587, 6588, 6593, 6777, 6770, 6784, 6801, 6811, 6822, 6828, 6834, 6840, 6764, 1008, 1014, 1023, 1036, 1044, 1053, 1063, 1074, 1086, 1099, 1128, 1144, 1160, 1009, 1018, 1029, 1113, 4875, 4901, 4910, 4931, 4943, 4956, 4970, 4985, 5001, 5018, 4880, 4886, 4893, 857, 863, 866, 828, 831, 833, 836, 849, 819, 839, 842, 818, 824, 827, 856, 865, 835, 848, 830, 841, 826, 4873, 4899, 4878, 4884, 4891, 4908, 4918, 4929, 4941, 4954, 4968, 4983, 4999, 4864, 4866, 4869]
liste_i = set(liste_i)

liste_j = [100, 89, 96, 93, 217, 429, 424, 423, 433, 1319, 1242, 1317, 1193, 1215, 1263, 1232, 1208, 1202, 1188, 1252, 1302, 1275, 1223, 1197, 1288, 1709, 1740, 1724, 1730, 1749, 1754, 1710, 1759, 1704, 1725, 1719, 1707, 1714, 1732, 1745, 1737, 1717, 1721, 1734, 1728, 1722, 1752, 1753, 1744, 1727, 1723, 1743, 1713, 1742, 1735, 1716, 1729, 1736, 1712, 1811, 4288, 4289, 4310, 4360, 4535, 4555, 4537, 4549, 4534, 4540, 4544, 4539, 4684, 4667, 4799, 4690, 4695, 4697, 4768, 4766, 4811, 4805, 4809, 4755, 4692, 4767, 4801, 4816, 4752, 4704, 4717, 4699, 4734, 4725, 4794, 4710, 4744, 4780, 4787, 4774, 4785, 4739, 4760, 4730, 4814, 4751, 4722, 4741, 4762, 4688, 4754, 4720, 4712, 4808, 4758, 4796, 4797, 4820, 4756, 4795, 4689, 4733, 4757, 4770, 4702, 4709, 4700, 4696, 4769, 4747, 4705, 4810, 4703, 4719, 4706, 4718, 4698, 4743, 4701, 4736, 4735, 4711, 4745, 4694, 4737, 4713, 4746, 4693, 4707, 4791, 4783, 4727, 4782, 5347, 5343, 5323, 5322, 5325, 5328, 5341, 5339, 5345, 5354, 5352, 5340, 5330, 5335, 5353, 5334, 5346, 5336, 5337, 5327, 5331, 5635, 5459, 5535, 5472, 5450, 5465, 5564, 5489, 5661, 5447, 5473, 5605, 5507, 5638, 5467, 5481, 5493, 5655, 5566, 5662, 5543, 5572, 5530, 5642, 5518, 5623, 5537, 5584, 5512, 5539, 5511, 5482, 5619, 5460, 5617, 5476, 5455, 5568, 5501, 5536, 5550, 5565, 5469, 5503, 5524, 5656, 5514, 5461, 5474, 5491, 5616, 5658, 5636, 5451, 5551, 5582, 5490, 5581, 5484, 5500, 5456, 5553, 5601, 5599, 5598, 5556, 5641, 5587, 5480, 5571, 5622, 5510, 5454, 5615, 5517, 5529, 5580, 5542, 5654, 5549, 5499, 5522, 5604, 5691, 5726, 5709, 5717, 5696, 5736, 5688, 5739, 5730, 5729, 5699, 5712, 5713, 5700, 5705, 5740, 5706, 5694, 5720, 5721, 5743, 5733, 5724, 5751, 5752, 5807, 5808, 6002, 6003, 6099, 6100, 6486, 6461, 6464, 6479, 6468, 6473, 6488, 6475, 6470, 6466, 391, 402, 396, 409, 498, 504, 519, 543, 493, 526, 511, 527, 483, 534, 518, 489, 553, 546, 808, 807, 813, 919, 976, 990, 922, 916, 994, 993, 952, 931, 1005, 944, 971, 937, 917, 1006, 961, 982, 966, 969, 957, 981, 979, 936, 949, 942, 1004, 999, 987, 992, 1413, 1416, 1565, 1570, 1571, 1853, 1848, 1851, 1855, 1857, 1862, 1860, 4854, 4832, 4829, 4847, 4841, 4836, 4827, 6139, 6202, 6146, 6153, 6156, 6194, 6174, 6141, 6160, 6169, 6195, 6167, 6170, 6159, 6186, 6145, 6178, 6181, 6151, 6142, 6191, 6137, 6136, 6157, 6172, 6192, 6152, 6158, 6165, 6140, 6147, 6138, 6143, 6185, 6187, 6162, 6175, 6155, 6176, 6154, 6198, 6149, 6193, 6168, 6197, 6161, 6188, 6183, 6144, 6184, 6171, 6179, 6163, 6148, 6166, 6177, 6214, 6227, 6208, 6233, 6434, 6439, 6450, 6431, 6432, 6444, 6429, 6443, 6435, 6449, 6428, 6455, 6430, 6438, 6469, 6462, 6480, 6465, 6474, 6487, 6634, 6696, 6685, 6640, 6674, 6647, 6664, 6703, 6728, 6710, 6722, 6717, 6708, 6713, 49, 58, 41, 79, 68, 34, 4604, 4628, 4599, 4617, 4620, 4625, 4610, 5057, 5200, 5101, 5127, 5156, 5161, 5132, 5090, 5203, 5172, 5117, 5210, 5077, 5125, 5086, 5158, 5185, 5135, 5069, 5171, 5073, 5092, 5116, 5099, 5146, 5088, 5173, 5168, 5104, 5074, 5066, 5063, 5089, 5064, 5095, 5108, 5174, 5060, 5079, 5201, 5160, 5084, 5123, 5155, 5061, 5070, 5058, 5128, 5118, 5181, 5202, 5114, 5097, 5094, 5075, 5138, 5169, 5197, 5102, 5126, 5093, 5096, 5110, 5198, 5133, 5071, 5067, 5087, 5082, 5113, 5119, 5159, 5122, 5100, 5105, 5136, 5083, 5149, 5186, 5195, 5143, 5187, 5147, 5188, 5144, 5183, 5182, 5148, 5825, 5824, 6936, 6909, 6939, 6912, 6918, 6934, 6929, 6923, 6932, 6914, 6921, 6927, 7002, 7018, 6993, 7043, 7042, 7029, 7014, 7026, 6979, 7046, 7052, 7047, 7034, 6944, 6968, 6975, 6964, 6953, 6998, 7033, 7048, 7009, 6946, 6992, 6957, 6962, 7021, 7013, 7038, 7025, 3, 6958, 6943, 6971, 7039, 7019, 7030, 7017, 36, 29, 74, 53, 18, 9, 63, 14, 23, 44, 11, 8, 247, 273, 265, 252, 267, 243, 258, 260, 1194, 1318, 1303, 1276, 1243, 1209, 1191, 1216, 1203, 1289, 1224, 1233, 1198, 1253, 1264, 5215, 5217, 5220, 5228, 5214, 5224, 6794, 6836, 6813, 6803, 6824, 124, 155, 151, 130, 127, 133, 148, 140, 118, 120, 135, 136, 152, 150, 137, 131, 142, 144, 129, 143, 157, 164, 160, 125, 122, 159, 4557, 4559, 4566, 4571, 4577, 4562, 4982, 4863, 4967, 4898, 4998, 4872, 4883, 4907, 4868, 4862, 4940, 4865, 4917, 4877, 4928, 4890, 4953, 5015, 5560, 5546, 5626, 5645, 5591, 5608, 5665, 5575, 5686, 5680, 5681, 5690, 5683, 5701, 5716, 5708, 5695, 5735, 5725, 6630, 6680, 6700, 6649, 6618, 6676, 6642, 6692, 6657, 6659, 6625, 6699, 6668, 6621, 6670, 6643, 6681, 6677, 6698, 6702, 6691, 6658, 6687, 6660, 6666, 6678, 6667, 6615, 6688, 6651, 6616, 6650, 6689, 6636, 771, 783, 779, 797, 792, 800, 774, 778, 793, 799, 784, 786, 789, 775, 790, 1062, 1073, 1119, 1042, 1083, 1092, 1122, 1153, 1134, 1096, 1059, 1050, 1084, 1035, 1109, 1105, 1069, 1150, 1123, 1154, 1138, 1072, 1095, 1108, 1137, 1617, 1597, 1596, 1624, 1662, 1599, 1602, 1606, 1641, 1632, 6878, 6843, 6871, 6853, 6862, 6887, 6875, 6848, 6879, 6857, 6860, 6851, 6858, 6856, 6866, 6874, 6844, 6864, 6873, 6849, 6868, 6861, 6855, 6867, 6846, 6852, 6881, 6883, 6886, 6882, 6332, 6291, 6323, 6334, 6295, 6304, 6321, 6333, 6326, 6302, 6293, 6308, 6315, 6297, 6290, 6324, 6316, 6317, 6300, 6340, 6305, 6299, 6294, 6318, 6330, 6339, 6313, 6310, 6309, 6311, 6496, 6561, 6518, 6542, 6602, 6505, 6601, 6501, 6568, 6499, 6511, 6612, 6550, 6573, 6574, 6551, 6557, 6507, 6586, 6523, 6547, 6502, 6575, 6600, 6588, 6587, 6593, 6562, 6510, 6503, 6524, 6516, 6580, 6517, 6541, 6525, 6552, 6607, 6512, 6506, 6563, 6540, 6538, 6531, 6532, 6533, 6834, 6822, 6801, 6777, 6840, 6828, 6784, 6770, 6764, 6811, 1008, 1044, 1023, 1029, 1099, 1160, 1063, 1014, 1036, 1128, 1113, 1074, 1018, 1086, 1053, 1009, 1144, 4875, 4985, 4901, 4970, 4931, 4910, 4956, 4886, 5018, 4943, 5001, 4880, 4893, 857, 865, 836, 848, 835, 849, 833, 839, 826, 831, 828, 841, 866, 827, 856, 830, 818, 842, 863, 824, 819, 4873, 4954, 4983, 4999, 4908, 4941, 4918, 4929, 4869, 4864, 4878, 4968, 4899, 4866, 4891, 4884]
liste_j = set(liste_j)

print(f'j - i : {liste_j-liste_i} \n')


print(f'i - j : {liste_i-liste_j}')

"""


"""
l1 = set()
for id in dico:
	l1.update({int(id)})


start = time.time()
outputa = solutionForList(l_dico2)
end = time.time()
elapseda = end - start
#print(outputa)
print(f'Temps d\'exécution : {elapseda:.5}s\n')

start = time.time()
outputb = sum_weight(dico2,dico2)
#print(dico2)
end = time.time()
elapsedb = end - start
print(f'Temps d\'exécution : {elapsedb:.5}s')
l2 = set()
for id in dico2:
	l2.update({int(id)})


print(outputa[0]+outputb)
print(f'Temps d\'exécution total : {elapseda + elapsedb:.5}s\n')

#print(f'l1 = {l1}')

set1 = set(output1[1])
set1.update(l1)

print(f'Set 1 = {set1}\n')

set2 = set(outputa[1])
set2.update(l2)


print(f'Set 2 = {set2}\n')

diff1 = set1 - set2
diff2 = set2 - set1

print(diff1)

print("\n")

print(diff2)

"""

############################################ Parallelization #################################################


def task(dico):
	val,liste = max_sum_list_int(dico,build_sol(dico))
	return val,liste


def parallelization(l_dico):
	output = [0,[]]
	start = time.time()
	pool = multiprocessing.Pool(2)
	result = pool.imap(task, l_dico["list"])
	for val,liste in result:
		output[0] += val
		output[1] += liste
	end = time.time()
	elapsed = end - start
	print(f'Temps d\'exécution : {elapsed:.5}s')
	return output,elapsed


#if __name__ == '__main__':
	#with open('.\..\..\Data_Json\Dictionnary\listDico\listOfDico.json', 'r') as f: 	
		#l_dico = json.load(f)

	#start = time.time()
	#output,elaspe = parallelization(l_dico)
	#end = time.time()
	#elapsed = end - start
	#print(f'Temps d\'exécution : {elapsed:.5}s\n')
	#print(output[0])
